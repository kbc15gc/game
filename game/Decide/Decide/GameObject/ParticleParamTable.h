#pragma once
#include "fbEngine\fbstdafx.h"
#include "fbEngine\_Object\_GameObject\ParticleEmitter.h"

namespace ParticleParamTable {
	enum Type { Min = -1, FoxFireViolet = 0, BombViolet, KatamariViolet, ShockViolet, TiroTiroViolet,TiroTiroTowerViolet, Max };

	static ParticleParameter Params[/*Type::Max*/] = {
		// 紫の狐火エフェクト。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3(0.0f,3.0f,0.0f),			// 初速度。
			Vector2(0.5f, 0.5f),	// テクスチャサイズ。
			0.1f,					// 寿命。
			0.008f,					// 生成待ち時間。
			Vector3(0.3f, 0.3f, 0.4f),	// 初期位置のランダム幅。
			Vector3(0.0f, 0.0f, 0.0f),	// 初速度のランダム幅。
			Vector3(0.4f,0.8f,0.4f),	// 速度の積分時のランダム幅。
			0.0f,						// 重力。
			true,					// フェードアウトするか。
			0.2f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			0.7f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f,1.0f,1.3f,1.0f),	// 乗算カラー。
			true					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},

		// 紫の爆発エフェクト。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3::zero,			// 初速度。
			Vector2(2.0f, 2.0f),	// テクスチャサイズ。
			0.002f,					// 寿命。
			0.005f,					// 生成待ち時間。
			Vector3(0.1f, 0.1f, 0.1f),	// 初期位置のランダム幅。
			Vector3(6.0f, 6.0f, 6.0f),	// 初速度のランダム幅。
			Vector3(2.0f, 2.0f, 2.0f),	// 速度の積分時のランダム幅。
			0.0f,						// 重力。
			true,					// フェードアウトするか。
			0.5f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			1.1f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f, 1.0f, 1.3f, 1.0f),	// 乗算カラー。
			false					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},

		// 紫の真ん中に塊、周辺にかけらのエフェクト。
		//// ※使えるかもしれないので置いておく。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3::zero,			// 初速度。
			Vector2(0.5f, 0.5f),	// テクスチャサイズ。
			0.2f,					// 寿命。
			0.008f,					// 生成待ち時間。
			Vector3(0.1f, 0.1f, 0.1f),	// 初期位置のランダム幅。
			Vector3(3.0f, 3.0f, 3.0f),	// 初速度のランダム幅。
			Vector3(2.0f, 2.0f, 2.0f),	// 速度の積分時のランダム幅。
			0.0f,						// 重力。
			true,					// フェードアウトするか。
			0.5f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			0.55f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f, 1.0f, 1.3f, 1.0f),	// 乗算カラー。
			true					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},

		// 紫の衝撃波。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3(0.0f,4.5f,0.0f) + Vector3(0.0f,0.0f,-3.0f),	// 初速度。
			Vector2(0.5f, 0.5f),	// テクスチャサイズ。
			0.1f,					// 寿命。
			0.004f,					// 生成待ち時間。
			Vector3(0.25f, 0.0f, 0.5f),	// 初期位置のランダム幅。
			Vector3(1.0f, 3.0f, 2.0f),	// 初速度のランダム幅。
			Vector3(0.0f, 0.0f, 0.0f),	// 速度の積分時のランダム幅。
			0.0f,						// 重力。
			true,					// フェードアウトするか。
			0.2f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			1.1f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f, 1.0f, 1.3f, 1.0f),	// 乗算カラー。
			true					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},

		// 紫のちろちろ(初期位置のランダム幅はコピー先でいい感じにしていいよ)。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3(0.0f,0.25f,0.0f),	// 初速度。
			Vector2(0.5f, 0.5f),	// テクスチャサイズ。
			0.1f,					// 寿命。
			0.006f,					// 生成待ち時間。
			Vector3(0.2f, 0.0f, 0.0f),	// 初期位置のランダム幅。
			Vector3(0.5f, 0.5f, 0.5f),	// 初速度のランダム幅。
			Vector3(0.5f, 0.0f, 10.0f),	// 速度の積分時のランダム幅。
			0.0f,					// 重力。
			true,					// フェードアウトするか。
			1.0f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			0.5f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f, 1.0f, 1.3f, 1.0f),	// 乗算カラー。
			false					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},

		// 紫の光の塔(ちろちろ)。
		{
			"MurasakiHonoo.png",	// テクスチャ名。
			Vector3(0.0f,3.0f,0.0f),	// 初速度。
			Vector2(0.5f, 0.5f),	// テクスチャサイズ。
			5.0f,					// 寿命。
			0.05f,					// 生成待ち時間。
			Vector3(0.4f, 0.0f, 0.4f),	// 初期位置のランダム幅。
			Vector3(0.0f,2.0f,0.0f),	// 初速度のランダム幅。
			Vector3::zero,	// 速度の積分時のランダム幅。
			0.0f,						// 重力。
			true,					// フェードアウトするか。
			2.0f,					// フェード時間。
			1.0f,					// 初期アルファ。
			true,					// ビルボードフラグ(常にカメラのほうを向くか)。
			1.1f,					// 輝度。
			1,						// 合成モード(0で乗算、1で加算)。
			Color(1.3f, 1.0f, 1.3f, 1.0f),	// 乗算カラー。
			true					// エミッターと生成したパーティクルの間で親子関係を結ぶか。
		},
	};
};